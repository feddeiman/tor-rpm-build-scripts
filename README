BUILDING THE RPMS

There are two build/preparation scripts in ~/TorBuildScripts:

tor_build.sh - builds the packages for various distros (look into it, there are
    some directory location settings, needs a Tor git repo checked out). The
    git tag can be specified either as arg1 on command line, otherwise the
    script will ask (script will pull to update the repo).

move_tor_rpms.sh - once the RPMs are built and signed, this script will create
    the metadata structure and sort rpms from source dir to destination dir
    with proper distro/arch subdirs.

Steps:

1. run tor_build.sh
2. try installing some of the packages (yum localinstall tor-X.Y.Z.rpm), test
   basic client functionality with something like:

    curl --socks5-hostname localhost:9050 https://check.torproject.org

3. sign the packages (offline; rpm --resign), reupload
4. use move_tor_rpms.sh to make the structure needed for serving via http
   (takes src dir and dst dir as arguments)


REQUIREMENTS ON THE BUILD ENVIRONMENT (already done here)

  I. Development software

They are described in doc/tor-rpm-creation.txt in Tor git repo. One shortcut
for installing the build tools (this is described in the linked howtos there):

Install group development-tools
in Fedora: 
    yum install @development-tools
in EL: 
    yum groupinstall development-tools

yum install fedora-packager redhat-rpm-config

#this is Tor specific for building the initial RPMs
yum install libevent-devel openssl-devel

Add the user you're using to build to 'mock' group:

usermod -a -G mock makerpm

  II. GPG keys for git tag verification

The user building RPMs must have keys of Tor devs imported via 'gpg --import'
so that tags can be verified. Look for keys/fingerprints here (it may be outdated):

https://www.torproject.org/docs/signing-keys.html.en

It is still recommended though to go over the build output of tor_build.sh just
to check which keys signed the tag and what gpg thought about it.


CAVEATS

  I. EL5, GPG keys and RPM signatures

Using GPG keys and signatures created on newer distros (like EL6 or F16) may
cause EL5 to fail validating signature:

https://bugzilla.redhat.com/show_bug.cgi?id=436812#c10

There are multiple issues:

- you can't use RSA key generated on newer distro, because EL5's rpm/gpg will
  compute incorrect key IDs (V4 key vs V3 key)
- digest algo and signature format must be kept backward compatible to SHA1
  (see the gpg params in the above bug)
- rpm does not handle subkeys (DSA with ElGamal subkey being the only apparent
  exception)
- large GPG DSA keys (>=2048 bit) cannot be used with SHA1 - gnupg will reject
  to make such signature, wants at least 256-bit digest (RFC 4880 thing)
- gnupg digest preferences can override RPM digest preferences, so you might
  end up with SHA256 digest which is not liked by EL5 rpm

For EL5, use 1024-bit DSA key for RPM signing.

Possibly handy macro to put in ~/.rpmmacros (forces the digest type over GPG
preferences):

%__gpg_sign_cmd                 %{__gpg} \
        gpg --batch --digest-algo=sha1 --no-verbose --no-armor \
        --passphrase-fd 3 --no-secmem-warning \
        -u "%{_gpg_name}" -sbo %{__signature_filename} %{__plaintext_filename}

There's also "--force-v3-sigs" parameter that would force V3 signatures, but
experimentation showed that V4 sigs are OK, just V4 RSA keys are not.


NOTES

Remember to increase '%define specver' in tor.spec.in if you're creating a new
RPM while the Tor version is the same (e.g. when fixing a packaging issue). The
specver is reset with new Tor version, so no need to commit it.
